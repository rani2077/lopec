        //보석?   삭제예정?????
        // let gemsFinalDamagePer = 0;
        // let gemsCool = 0;
        // let gemsSum = 0;
        // let gemsCount = 0;
        // let gemsCoolCount = 0;

        // try{
        //     data.ArmoryGem.Gems.forEach(function(arry){
        //         if(arry.Name.includes("10레벨 겁화")){
        //             gemsSum += 44
        //             gemsCount += 1
        //         }else if(arry.Name.includes("9레벨 겁화"||arry.Name.includes("10레벨 멸화"))){
        //             gemsSum += 40
        //             gemsCount += 1
        //         }else if(arry.Name.includes("8레벨 겁화")){
        //             gemsSum += 36
        //             gemsCount += 1
        //         }else if(arry.Name.includes("7레벨 겁화")){
        //             gemsSum += 32
        //             gemsCount += 1
        //         }else if(arry.Name.includes("9레벨 멸화")){
        //             gemsSum += 30
        //             gemsCount += 1
        //         }else if(arry.Name.includes("6레벨 겁화")){
        //             gemsSum += 28
        //             gemsCount += 1
        //         }else if(arry.Name.includes("5레벨 겁화")||arry.Name.includes("8레벨 멸화")){
        //             gemsSum += 24
        //             gemsCount += 1
        //         }else if(arry.Name.includes("7레벨 멸화")){
        //             gemsSum += 21
        //             gemsCount += 1
        //         }else if(arry.Name.includes("4레벨 겁화")){
        //             gemsSum += 20
        //             gemsCount += 1
        //         }else if(arry.Name.includes("6레벨 멸화")){
        //             gemsSum += 18
        //             gemsCount += 1
        //         }else if(arry.Name.includes("5레벨 멸화")){
        //             gemsSum += 15
        //             gemsCount += 1
        //         }else if(arry.Name.includes("2레벨 겁화")||arry.Name.includes("4레벨 멸화")){
        //             gemsSum += 12
        //             gesmCount += 1
        //         }else if(arry.Name.includes("1레벨 겁화")||arry.Name.includes("3레벨 멸화")){
        //             gemsSum += 8
        //             gemsCount += 1
        //         }
        //     })
        // }catch{
        // }


        // try{
        //     data.ArmoryGem.Gems.forEach(function(arry){
        //         if(arry.Name.includes("10레벨 작열")){
        //             gemsCool += 24
        //             gemsCoolCount += 1
        //         }else if(arry.Name.includes("9레벨 작열")){
        //             gemsCool += 22
        //             gemsCoolCount += 1
        //         }else if(arry.Name.includes("8레벨 작열")||arry.Name.includes("10레벨 홍염")){
        //             gemsCool += 20
        //             gemsCoolCount += 1
        //         }else if(arry.Name.includes("7레벨 작열")||arry.Name.includes("9레벨 홍염")){
        //             gemsCool += 18
        //             gemsCoolCount += 1
        //         }else if(arry.Name.includes("6레벨 작열")||arry.Name.includes("8레벨 홍염")){
        //             gemsCool += 16
        //             gemsCoolCount += 1
        //         }else if(arry.Name.includes("5레벨 작열")||arry.Name.includes("7레벨 홍염")){
        //             gemsCool += 14
        //             gemsCoolCount += 1
        //         }else if(arry.Name.includes("4레벨 작열")||arry.Name.includes("6레벨 홍염")){
        //             gemsCool += 12
        //             gemsCoolCount += 1
        //         }else if(arry.Name.includes("3레벨 작열")||arry.Name.includes("5레벨 홍염")){
        //             gemsCool += 10
        //             gemsCoolCount += 1
        //         }else if(arry.Name.includes("2레벨 작열")||arry.Name.includes("4레벨 홍염")){
        //             gemsCool += 8
        //             gesmCoolCount += 1
        //         }else if(arry.Name.includes("1레벨 작열")||arry.Name.includes("3레벨 홍염")){
        //             gemsCool += 6
        //             gemsCoolCount += 1
        //         }     
        //     })    
        // }catch{

        // }

        
        //gemsFinalDamagePer = (gemsCount === 0 ? 0 : (gemsSum / gemsCount) / 100 + 1).toFixed(4) 삭제예정
        //gemsCool = (gemsCoolCount === 0 ? 0 : (gemsCool / gemsCoolCount) / 100 + 1).toFixed(4) 삭제예정




        //각인 효율
        //let engEffObj = {
        //    attackPow:0,  // 각인 제외 공격력
        //    criticalChanceResult:0,  // 각인 제외 치적
        //    criticalDamageResult:0,   // 각인 제외 치피
        //    evolutionDamage:0, //각인 제외 진화형 피해
        //    overcritical:0, // 각인 제외 오버치적
        //    spikeDamage:0, // 각인 제외 뭉가 피해량
        //    finalDamageResult:0,   // 각인 제외 적에게 주는 피해
        //    evolutionDamage:0, // 각인 제외 진화형 피해
        //    finalValue:0,    // 각인 제외 최종 환산 
        //    efficiency:0, // 각인 효율
        //    adrenalineEff:0
        //}

        //engEffObj.criticalChanceResult = (defaultObj.criticalChancePer + jobObj.criticalChancePer + accObj.criticalChancePer + bangleObj.criticalChancePer + arkObj.criticalChancePer + elixirObj.criticalChancePer)
        //engEffObj.evolutionDamage = arkObj.evolutionDamage


        //////각인 빠졌을 때 뭉가 다시 계산////////////////////////////////////////////////////////////////////////////
        //evolutionArry.forEach(function(evolution){
        //    if(evolution.name == "뭉툭한 가시" && evolution.level == 1){
        //        
        //        
        //        engEffObj.evolutionDamage -= spikeDamage // 진화형 피해에서 뭉가 제거
        //        engEffObj.overcritical = Math.max(engEffObj.criticalChanceResult-80,0); // 각인 제외 했을때 오버 치적
        //        engEffObj.criticalChanceResult = Math.min(engEffObj.criticalChanceResult, 80); // 각인 제외 했을때 최종 치적
        //        engEffObj.spikeDamage = Math.min(7.5+engEffObj.overcritical*1.2, 50)
        //        engEffObj.evolutionDamage += engEffObj.spikeDamage // 진화형 피해에 새로운 뭉가 추가

        //    }else if(evolution.name == "뭉툭한 가시" && evolution.level == 2){

        //        engEffObj.evolutionDamage -= spikeDamage // 진화형 피해에서 뭉가 제거
        //        engEffObj.overcritical = Math.max(engEffObj.criticalChanceResult-80,0); // 각인 제외 했을때 오버 치적
        //        engEffObj.criticalChanceResult = Math.min(engEffObj.criticalChanceResult, 80); // 각인 제외 했을때 최종 치적
        //        engEffObj.spikeDamage = Math.min(15+engEffObj.overcritical*1.4, 70)
        //        engEffObj.evolutionDamage += engEffObj.spikeDamage // 진화형 피해에 새로운 뭉가 추가

        //    }
        //})
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //engEffObj.adrenalineEff = ((1*criticalChanceResult*criticalDamageResult/100 + 1*(100-criticalChanceResult))) / ((1*engEffObj.criticalChanceResult*criticalDamageResult/100 + 1*(100-engEffObj.criticalChanceResult)))
        //engEffObj.efficiency = ((engObj.finalDamagePer*100) * (defaultObj.attackPow * ((engObj.atkPer/100)+1))/defaultObj.attackPow)
